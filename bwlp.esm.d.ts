//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { bwlp } from "./bwlp_types";


export declare class MasterServerClient {
    input: Thrift.TJSONProtocol;
    output: Thrift.TJSONProtocol;
    seqid: number;

    constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

    ping(): Promise<boolean>;


    authenticate(login: string, password: string): Promise<SessionData>;


    localAccountLogin(login: string, password: string): Promise<ClientSessionData>;


    setUsedSatellite(sessionId: string, satelliteName: string): Promise<void>;


    findUser(sessionId: string, organizationId: string, searchTerm: string): Promise<UserInfo[]>;


    getPublicImages(sessionId: string, page: number): Promise<ImageSummaryRead[]>;


    getImageDetails(sessionId: string, imageBaseId: string): Promise<ImageDetailsRead>;


    getUser(userToken: string, userId: string): Promise<UserInfo>;


    invalidateSession(sessionId: string): Promise<void>;


    getSessionFromAccessCode(accessCode: string): Promise<ClientSessionData>;


    getUserFromToken(token: string): Promise<UserInfo>;


    isServerAuthenticated(serverSessionId: string): Promise<boolean>;


    startServerAuthentication(satelliteId: number): Promise<Buffer>;


    serverAuthenticate(satelliteId: number, challengeResponse: Buffer): Promise<ServerSessionData>;


    getImageData(serverSessionId: string, imageVersionId: string): Promise<ImagePublishData>;


    submitImage(userToken: string, imageDescription: ImagePublishData, blockHashes: Buffer[]): Promise<TransferInformation>;


    registerSatellite(userToken: string, displayName: string, addresses: string[], modulus: string, exponent: string, certsha256: Buffer): Promise<number>;


    updateSatellite(serverSessionId: string, displayName: string, addresses: string[]): Promise<boolean>;


    downloadImage(sessionId: string, imageVersionId: string): Promise<TransferInformation>;


    getOrganizations(): Promise<Organization[]>;


    getOperatingSystems(): Promise<OperatingSystem[]>;


    getVirtualizers(): Promise<Virtualizer[]>;


    getTags(startDate: Int64): Promise<MasterTag[]>;


    getSoftware(startDate: Int64): Promise<MasterSoftware[]>;


    queryUploadStatus(uploadToken: string): Promise<TransferStatus>;

  }
//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { bwlp } from "./bwlp_types";


export declare class SatelliteServerClient {
    input: Thrift.TJSONProtocol;
    output: Thrift.TJSONProtocol;
    seqid: number;

    constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

    getVersion(clientVersion: Int64): Promise<Int64>;


    getSupportedFeatures(): Promise<string>;


    getConfiguration(): Promise<SatelliteConfig>;


    requestImageVersionUpload(userToken: string, imageBaseId: string, fileSize: Int64, blockHashes: Buffer[], machineDescription: Buffer): Promise<TransferInformation>;


    updateBlockHashes(uploadToken: string, blockHashes: Buffer[], userToken: string): Promise<void>;


    setUploadOptions(userToken: string, uploadToken: string, options: UploadOptions): Promise<UploadOptions>;


    cancelUpload(uploadToken: string): Promise<void>;


    queryUploadStatus(uploadToken: string): Promise<TransferStatus>;


    requestDownload(userToken: string, imageVersionId: string): Promise<TransferInformation>;


    cancelDownload(downloadToken: string): Promise<void>;


    isAuthenticated(userToken: string): Promise<void>;


    whoami(userToken: string): Promise<WhoamiInfo>;


    invalidateSession(userToken: string): Promise<void>;


    getUserList(userToken: string, page: number): Promise<UserInfo[]>;


    getUserConfig(userToken: string): Promise<SatelliteUserConfig>;


    setUserConfig(userToken: string, config: SatelliteUserConfig): Promise<void>;


    getOperatingSystems(): Promise<OperatingSystem[]>;


    getVirtualizers(): Promise<Virtualizer[]>;


    getAllOrganizations(): Promise<Organization[]>;


    getLocations(): Promise<Location[]>;


    getStatus(): Promise<SatelliteStatus>;


    getImageList(userToken: string, tagSearch: string[], page: number): Promise<ImageSummaryRead[]>;


    getImageDetails(userToken: string, imageBaseId: string): Promise<ImageDetailsRead>;


    createImage(userToken: string, imageName: string): Promise<string>;


    updateImageBase(userToken: string, imageBaseId: string, image: ImageBaseWrite): Promise<void>;


    updateImageVersion(userToken: string, imageVersionId: string, image: ImageVersionWrite): Promise<void>;


    deleteImageVersion(userToken: string, imageVersionId: string): Promise<void>;


    deleteImageBase(userToken: string, imageBaseId: string): Promise<void>;


    writeImagePermissions(userToken: string, imageBaseId: string, permissions: { [k: string]: ImagePermissions; }): Promise<void>;


    getImagePermissions(userToken: string, imageBaseId: string): Promise<{ [k: string]: ImagePermissions; }>;


    setImageOwner(userToken: string, imageBaseId: string, newOwnerId: string): Promise<void>;


    setImageVersionExpiry(userToken: string, imageBaseId: string, expireTime: Int64): Promise<void>;


    getImageVersionVirtConfig(userToken: string, imageVersionId: string): Promise<Buffer>;


    setImageVersionVirtConfig(userToken: string, imageVersionId: string, meta: Buffer): Promise<void>;


    requestImageReplication(userToken: string, imageVersionId: string): Promise<string>;


    publishImageVersion(userToken: string, imageVersionId: string): Promise<string>;


    createLecture(userToken: string, lecture: LectureWrite): Promise<string>;


    updateLecture(userToken: string, lectureId: string, lecture: LectureWrite): Promise<void>;


    getLectureList(userToken: string, page: number): Promise<LectureSummary[]>;


    getLectureDetails(userToken: string, lectureId: string): Promise<LectureRead>;


    deleteLecture(userToken: string, lectureId: string): Promise<void>;


    writeLecturePermissions(userToken: string, lectureId: string, permissions: { [k: string]: LecturePermissions; }): Promise<void>;


    getLecturePermissions(userToken: string, lectureId: string): Promise<{ [k: string]: LecturePermissions; }>;


    setLectureOwner(userToken: string, lectureId: string, newOwnerId: string): Promise<void>;


    getPredefinedData(userToken: string): Promise<PredefinedData>;

  }
//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Int64 = require('node-int64');


export declare enum AuthorizationError {
  GENERIC_ERROR = 0,
  NOT_AUTHENTICATED = 1,
  NO_PERMISSION = 2,
  ACCOUNT_SUSPENDED = 3,
  ORGANIZATION_SUSPENDED = 4,
  INVALID_CREDENTIALS = 5,
  INVALID_ORGANIZATION = 6,
  INVALID_KEY = 7,
  INVALID_TOKEN = 8,
  CHALLENGE_FAILED = 9,
  BANNED_NETWORK = 10,
}

export declare enum InvocationError {
  MISSING_DATA = 0,
  INVALID_DATA = 1,
  UNKNOWN_IMAGE = 2,
  UNKNOWN_USER = 3,
  UNKNOWN_LECTURE = 4,
  INVALID_SHARE_MODE = 5,
  INTERNAL_SERVER_ERROR = 6,
}

export declare enum ShareMode {
  LOCAL = 0,
  PUBLISH = 1,
  DOWNLOAD = 2,
  FROZEN = 3,
}

export declare enum NetDirection {
  IN = 0,
  OUT = 1,
}

export declare enum Role {
  STUDENT = 0,
  TUTOR = 1,
}

export declare enum TransferState {
  IDLE = 0,
  WORKING = 1,
  FINISHED = 2,
  ERROR = 3,
}

export declare enum DateParamError {
  TOO_LOW = 0,
  TOO_HIGH = 1,
  NEGATIVE_RANGE = 2,
}

export declare enum NetShareAuth {
  LOGIN_USER = 0,
  OTHER_USER = 1,
}

export declare enum SscMode {
  OFF = 0,
  ON = 1,
  AUTO = 2,
  USER = 3,
}

export declare class UserInfo {
    userId: string;
    firstName: string;
    lastName: string;
    eMail: string;
    organizationId: string;
    role?: Role;

      constructor(args?: { userId: string; firstName: string; lastName: string; eMail: string; organizationId: string; role?: Role; });
  }

export declare class WhoamiInfo {
    user: UserInfo;
    isSuperUser: boolean;
    canListImages: boolean;

      constructor(args?: { user: UserInfo; isSuperUser: boolean; canListImages: boolean; });
  }

export declare class Organization {
    organizationId: string;
    displayName: string;
    ecpUrl: string;
    suffixList: string[];

      constructor(args?: { organizationId: string; displayName: string; ecpUrl: string; suffixList: string[]; });
  }

export declare class Satellite {
    addressList: string[];
    displayName: string;
    certSha256: Buffer;

      constructor(args?: { addressList: string[]; displayName: string; certSha256: Buffer; });
  }

export declare class SessionData {
    sessionId: string;
    authToken: string;
    serverAddress: string;

      constructor(args?: { sessionId: string; authToken: string; serverAddress: string; });
  }

export declare class ClientSessionData {
    sessionId: string;
    authToken: string;
    satellites: Satellite[];
    userInfo: UserInfo;

      constructor(args?: { sessionId: string; authToken: string; satellites: Satellite[]; userInfo: UserInfo; });
  }

export declare class ServerSessionData {
    sessionId: string;

      constructor(args?: { sessionId: string; });
  }

export declare class Virtualizer {
    virtId: string;
    virtName: string;

      constructor(args?: { virtId: string; virtName: string; });
  }

export declare class OperatingSystem {
    osId: number;
    osName: string;
    virtualizerOsId: { [k: string]: string; };
    architecture: string;
    maxMemMb: number;
    maxCores: number;

      constructor(args?: { osId: number; osName: string; virtualizerOsId: { [k: string]: string; }; architecture: string; maxMemMb: number; maxCores: number; });
  }

export declare class ImagePermissions {
    link: boolean;
    download: boolean;
    edit: boolean;
    admin: boolean;

      constructor(args?: { link: boolean; download: boolean; edit: boolean; admin: boolean; });
  }

export declare class LecturePermissions {
    edit: boolean;
    admin: boolean;

      constructor(args?: { edit: boolean; admin: boolean; });
  }

export declare class ImageBaseWrite {
    imageName: string;
    description: string;
    osId: number;
    virtId: string;
    isTemplate: boolean;
    defaultPermissions: ImagePermissions;
    shareMode: ShareMode;
    addTags?: string[];
    remTags?: string[];

      constructor(args?: { imageName: string; description: string; osId: number; virtId: string; isTemplate: boolean; defaultPermissions: ImagePermissions; shareMode: ShareMode; addTags?: string[]; remTags?: string[]; });
  }

export declare class ImageVersionWrite {
    isRestricted: boolean;

      constructor(args?: { isRestricted: boolean; });
  }

export declare class ImageSummaryRead {
    imageBaseId: string;
    latestVersionId: string;
    imageName: string;
    description: string;
    osId: number;
    virtId: string;
    createTime: Int64;
    updateTime: Int64;
    uploadTime: Int64;
    expireTime: Int64;
    ownerId: string;
    uploaderId: string;
    shareMode: ShareMode;
    fileSize: Int64;
    isRestricted: boolean;
    isValid: boolean;
    isProcessed: boolean;
    isTemplate: boolean;
    defaultPermissions: ImagePermissions;
    userPermissions?: ImagePermissions;
    fileSizeSum?: Int64;
    versionCount?: number;

      constructor(args?: { imageBaseId: string; latestVersionId: string; imageName: string; description: string; osId: number; virtId: string; createTime: Int64; updateTime: Int64; uploadTime: Int64; expireTime: Int64; ownerId: string; uploaderId: string; shareMode: ShareMode; fileSize: Int64; isRestricted: boolean; isValid: boolean; isProcessed: boolean; isTemplate: boolean; defaultPermissions: ImagePermissions; userPermissions?: ImagePermissions; fileSizeSum?: Int64; versionCount?: number; });
  }

export declare class ImageVersionDetails {
    versionId: string;
    createTime: Int64;
    expireTime: Int64;
    fileSize: Int64;
    uploaderId: string;
    isRestricted: boolean;
    isValid: boolean;
    isProcessed: boolean;
    software: string[];

      constructor(args?: { versionId: string; createTime: Int64; expireTime: Int64; fileSize: Int64; uploaderId: string; isRestricted: boolean; isValid: boolean; isProcessed: boolean; software: string[]; });
  }

export declare class ImageDetailsRead {
    imageBaseId: string;
    latestVersionId: string;
    versions: ImageVersionDetails[];
    imageName: string;
    description: string;
    tags: string[];
    osId: number;
    virtId: string;
    createTime: Int64;
    updateTime: Int64;
    ownerId: string;
    updaterId: string;
    shareMode: ShareMode;
    isTemplate: boolean;
    defaultPermissions: ImagePermissions;
    userPermissions?: ImagePermissions;

      constructor(args?: { imageBaseId: string; latestVersionId: string; versions: ImageVersionDetails[]; imageName: string; description: string; tags: string[]; osId: number; virtId: string; createTime: Int64; updateTime: Int64; ownerId: string; updaterId: string; shareMode: ShareMode; isTemplate: boolean; defaultPermissions: ImagePermissions; userPermissions?: ImagePermissions; });
  }

export declare class ImagePublishData {
    imageBaseId: string;
    imageVersionId: string;
    imageName: string;
    description: string;
    createTime: Int64;
    uploader: UserInfo;
    fileSize: Int64;
    software: string[];
    tags: string[];
    osId: number;
    virtId: string;
    isTemplate: boolean;
    owner: UserInfo;
    machineDescription: Buffer;

      constructor(args?: { imageBaseId: string; imageVersionId: string; imageName: string; description: string; createTime: Int64; uploader: UserInfo; fileSize: Int64; software: string[]; tags: string[]; osId: number; virtId: string; isTemplate: boolean; owner: UserInfo; machineDescription: Buffer; });
  }

export declare class NetRule {
    direction: NetDirection;
    host: string;
    port: number;

      constructor(args?: { direction: NetDirection; host: string; port: number; });
  }

export declare class NetShare {
    auth: NetShareAuth;
    path: string;
    displayname?: string;
    mountpoint?: string;
    username?: string;
    password?: string;
    shareId?: number;

      constructor(args?: { auth: NetShareAuth; path: string; displayname?: string; mountpoint?: string; username?: string; password?: string; shareId?: number; });
  }

export declare class LdapFilter {
    attribute: string;
    value: string;
    filterId?: number;
    title?: string;

      constructor(args?: { attribute: string; value: string; filterId?: number; title?: string; });
  }

export declare class PresetRunScript {
    scriptId: number;
    displayname: string;
    osIds: number[];

      constructor(args?: { scriptId: number; displayname: string; osIds: number[]; });
  }

export declare class PresetNetRule {
    ruleId: number;
    displayName: string;
    netRules: NetRule[];

      constructor(args?: { ruleId: number; displayName: string; netRules: NetRule[]; });
  }

export declare class PredefinedData {
    netShares: NetShare[];
    ldapFilter: LdapFilter[];
    runScripts: PresetRunScript[];
    networkExceptions: PresetNetRule[];

      constructor(args?: { netShares: NetShare[]; ldapFilter: LdapFilter[]; runScripts: PresetRunScript[]; networkExceptions: PresetNetRule[]; });
  }

export declare class LectureWrite {
    lectureName: string;
    description: string;
    imageVersionId: string;
    autoUpdate: boolean;
    isEnabled: boolean;
    startTime: Int64;
    endTime: Int64;
    runscript: string;
    nics: string[];
    networkExceptions?: NetRule[];
    isExam: boolean;
    hasInternetAccess: boolean;
    defaultPermissions: LecturePermissions;
    addAllowedUsers?: string[];
    remAllowedUsers?: string[];
    locationIds: number[];
    limitToLocations: boolean;
    limitToAllowedUsers: boolean;
    hasUsbAccess: boolean;
    networkShares?: NetShare[];
    ldapFilters?: LdapFilter[];
    presetScriptIds?: number[];
    presetNetworkExceptionIds?: number[];

      constructor(args?: { lectureName: string; description: string; imageVersionId: string; autoUpdate: boolean; isEnabled: boolean; startTime: Int64; endTime: Int64; runscript: string; nics: string[]; networkExceptions?: NetRule[]; isExam: boolean; hasInternetAccess: boolean; defaultPermissions: LecturePermissions; addAllowedUsers?: string[]; remAllowedUsers?: string[]; locationIds: number[]; limitToLocations: boolean; limitToAllowedUsers: boolean; hasUsbAccess: boolean; networkShares?: NetShare[]; ldapFilters?: LdapFilter[]; presetScriptIds?: number[]; presetNetworkExceptionIds?: number[]; });
  }

export declare class LectureSummary {
    lectureId: string;
    lectureName: string;
    description: string;
    imageVersionId: string;
    imageBaseId: string;
    isEnabled: boolean;
    startTime: Int64;
    endTime: Int64;
    lastUsed: Int64;
    useCount: number;
    ownerId: string;
    updaterId: string;
    isExam: boolean;
    hasInternetAccess: boolean;
    defaultPermissions: LecturePermissions;
    userPermissions?: LecturePermissions;
    isImageVersionUsable: boolean;
    hasUsbAccess: boolean;

      constructor(args?: { lectureId: string; lectureName: string; description: string; imageVersionId: string; imageBaseId: string; isEnabled: boolean; startTime: Int64; endTime: Int64; lastUsed: Int64; useCount: number; ownerId: string; updaterId: string; isExam: boolean; hasInternetAccess: boolean; defaultPermissions: LecturePermissions; userPermissions?: LecturePermissions; isImageVersionUsable: boolean; hasUsbAccess: boolean; });
  }

export declare class LectureRead {
    lectureId: string;
    lectureName: string;
    description: string;
    imageVersionId: string;
    imageBaseId: string;
    autoUpdate: boolean;
    isEnabled: boolean;
    startTime: Int64;
    endTime: Int64;
    lastUsed: Int64;
    useCount: number;
    createTime: Int64;
    updateTime: Int64;
    ownerId: string;
    updaterId: string;
    runscript: string;
    nics: string[];
    allowedUsers: string[];
    networkExceptions: NetRule[];
    isExam: boolean;
    hasInternetAccess: boolean;
    defaultPermissions: LecturePermissions;
    userPermissions?: LecturePermissions;
    locationIds: number[];
    limitToLocations: boolean;
    limitToAllowedUsers: boolean;
    hasUsbAccess: boolean;
    networkShares?: NetShare[];
    ldapFilters?: LdapFilter[];
    presetScriptIds?: number[];
    presetNetworkShares?: number[];
    presetLdapFilters?: number[];
    presetNetworkExceptionIds?: number[];

      constructor(args?: { lectureId: string; lectureName: string; description: string; imageVersionId: string; imageBaseId: string; autoUpdate: boolean; isEnabled: boolean; startTime: Int64; endTime: Int64; lastUsed: Int64; useCount: number; createTime: Int64; updateTime: Int64; ownerId: string; updaterId: string; runscript: string; nics: string[]; allowedUsers: string[]; networkExceptions: NetRule[]; isExam: boolean; hasInternetAccess: boolean; defaultPermissions: LecturePermissions; userPermissions?: LecturePermissions; locationIds: number[]; limitToLocations: boolean; limitToAllowedUsers: boolean; hasUsbAccess: boolean; networkShares?: NetShare[]; ldapFilters?: LdapFilter[]; presetScriptIds?: number[]; presetNetworkShares?: number[]; presetLdapFilters?: number[]; presetNetworkExceptionIds?: number[]; });
  }

export declare class MasterTag {
    tag: string;
    createTime: Int64;

      constructor(args?: { tag: string; createTime: Int64; });
  }

export declare class MasterSoftware {
    software: string;
    isRestricted: boolean;
    createTime: Int64;

      constructor(args?: { software: string; isRestricted: boolean; createTime: Int64; });
  }

export declare class TransferInformation {
    token: string;
    plainPort: number;
    sslPort: number;
    blockHashes?: Buffer[];
    machineDescription?: Buffer;

      constructor(args?: { token: string; plainPort: number; sslPort: number; blockHashes?: Buffer[]; machineDescription?: Buffer; });
  }

export declare class TransferStatus {
    blockStatus: Buffer;
    state: TransferState;

      constructor(args?: { blockStatus: Buffer; state: TransferState; });
  }

export declare class UploadOptions {
    serverSideCopying: boolean;

      constructor(args?: { serverSideCopying: boolean; });
  }

export declare class SatelliteConfig {
    pageSize: number;
    defaultImagePermissions: ImagePermissions;
    defaultLecturePermissions: LecturePermissions;
    maxImageValidityDays: number;
    maxLectureValidityDays: number;
    maxTransfers?: number;
    maxConnectionsPerTransfer?: number;
    maxLocationsPerLecture?: number;
    allowLoginByDefault?: boolean;
    serverSideCopy?: SscMode;
    allowStudentDownload?: boolean;
    vmSizeLimit?: Int64;

      constructor(args?: { pageSize: number; defaultImagePermissions: ImagePermissions; defaultLecturePermissions: LecturePermissions; maxImageValidityDays: number; maxLectureValidityDays: number; maxTransfers?: number; maxConnectionsPerTransfer?: number; maxLocationsPerLecture?: number; allowLoginByDefault?: boolean; serverSideCopy?: SscMode; allowStudentDownload?: boolean; vmSizeLimit?: Int64; });
  }

export declare class SatelliteStatus {
    availableStorageBytes: Int64;
    serverTime: Int64;

      constructor(args?: { availableStorageBytes: Int64; serverTime: Int64; });
  }

export declare class SatelliteUserConfig {
    emailNotifications: boolean;

      constructor(args?: { emailNotifications: boolean; });
  }

export declare class Location {
    locationId: number;
    locationName: string;
    parentLocationId: number;

      constructor(args?: { locationId: number; locationName: string; parentLocationId: number; });
  }

export declare class TTransferRejectedException extends Thrift.TException {
    message: string;

      constructor(args?: { message: string; });
  }

export declare class TAuthorizationException extends Thrift.TException {
    number: AuthorizationError;
    message: string;

      constructor(args?: { number: AuthorizationError; message: string; });
  }

export declare class TInvalidTokenException extends Thrift.TException {
  }

export declare class TNotFoundException extends Thrift.TException {
    message: string;

      constructor(args?: { message: string; });
  }

export declare class TInvalidDateParam extends Thrift.TException {
    number: DateParamError;
    message: string;

      constructor(args?: { number: DateParamError; message: string; });
  }

export declare class TInvocationException extends Thrift.TException {
    number: InvocationError;
    message: string;

      constructor(args?: { number: InvocationError; message: string; });
  }
